#!/bin/bash
# check_versions.sh - Check for new commits in php-ext-zstd
# Auto-commits and pushes changes when new commits are detected

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VERSIONS_FILE="$SCRIPT_DIR/versions.json"

# Parse command line arguments
MODE="check"
DRY_RUN=0
FORCE=0

while [[ $# -gt 0 ]]; do
    case $1 in
        --update)
            MODE="update"
            shift
            ;;
        --check-only)
            MODE="check"
            shift
            ;;
        --dry-run)
            DRY_RUN=1
            shift
            ;;
        --force)
            FORCE=1
            shift
            ;;
        --help)
            echo "Usage: $0 [--check-only|--update] [--dry-run] [--force]"
            echo "  --check-only  Check for updates but don't modify anything (default)"
            echo "  --update      Update versions.json and commit+push if changed"
            echo "  --dry-run     Show what would be done without making changes"
            echo "  --force       Force update even if versions haven't changed"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Function to get current timestamp
get_timestamp() {
    date -u +"%Y-%m-%dT%H:%M:%SZ"
}

# Function to get latest commit from GitHub
get_latest_commit() {
    local api_url="https://api.github.com/repos/kjdev/php-ext-zstd/commits/master"
    local commit_info=""
    
    # Try to get commit info from GitHub API
    if command -v curl >/dev/null 2>&1; then
        commit_info=$(curl -s "$api_url")
    fi
    
    if [ -n "$commit_info" ] && [ "$commit_info" != "null" ]; then
        COMMIT=$(echo "$commit_info" | grep '"sha"' | head -1 | sed 's/.*"sha": *"//;s/".*//')
        COMMIT_DATE=$(echo "$commit_info" | grep '"date"' | head -1 | sed 's/.*"date": *"//;s/".*//')
        COMMIT_MESSAGE=$(echo "$commit_info" | grep '"message"' | head -1 | sed 's/.*"message": *"//;s/".*//;s/\\n.*//;s/\\"/"/g')
        
        if [ -n "$COMMIT" ]; then
            echo "$COMMIT"
            return 0
        fi
    fi
    
    echo "unknown"
    return 1
}

# Function to get version from php_zstd.h
get_version() {
    # Clone temporarily to get version
    local tmpdir=$(mktemp -d)
    cd "$tmpdir"
    git clone --depth=1 https://github.com/kjdev/php-ext-zstd.git >/dev/null 2>&1
    cd php-ext-zstd
    VERSION=$(sed -n '/#define PHP_ZSTD_VERSION/{s/.* "//;s/".*$//;p}' php_zstd.h)
    if [ -z "$VERSION" ]; then
        VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "0.13.3")
    fi
    cd "$SCRIPT_DIR"
    rm -rf "$tmpdir"
    echo "$VERSION"
}

# Function to read current versions from JSON
read_current_versions() {
    if [ -f "$VERSIONS_FILE" ]; then
        CURRENT_COMMIT=$(grep -A3 '"php-zstd"' "$VERSIONS_FILE" | grep '"commit"' | sed 's/.*"commit": *"//;s/".*//')
        CURRENT_VERSION=$(grep -A1 '"php-zstd"' "$VERSIONS_FILE" | grep '"version"' | sed 's/.*"version": *"//;s/".*//')
    else
        CURRENT_COMMIT=""
        CURRENT_VERSION=""
    fi
}

# Function to write versions to JSON
write_versions() {
    local commit="$1"
    local version="$2"
    local commit_date="$3"
    local commit_message="$4"
    local timestamp="$(get_timestamp)"
    
    cat > "$VERSIONS_FILE" <<EOF
{
  "php-zstd": {
    "version": "$version",
    "commit": "$commit",
    "short_commit": "${commit:0:7}",
    "commit_date": "$commit_date",
    "commit_message": "$commit_message",
    "repository": "https://github.com/kjdev/php-ext-zstd",
    "pecl_url": "https://pecl.php.net/package/zstd",
    "last_checked": "$timestamp"
  },
  "last_update": "$timestamp"
}
EOF
}

# Function to commit and push changes
commit_and_push() {
    local old_commit="$1"
    local new_commit="$2"
    local version="$3"
    
    cd "$SCRIPT_DIR"
    
    # Configure git if needed (for CI environments)
    if ! git config user.name >/dev/null 2>&1; then
        git config user.name "Version Checker Bot"
        git config user.email "bot@github-actions"
    fi
    
    # Stage the versions file
    git add versions.json
    
    # Create commit message
    local commit_msg=""
    
    if [ "$old_commit" != "$new_commit" ]; then
        commit_msg="Auto-update: New commit detected ${new_commit:0:7}"
    else
        commit_msg="Force update versions.json"
    fi
    
    commit_msg="$commit_msg

Version: $version
Commit: ${new_commit:0:7}

This commit triggers automatic COPR rebuild with latest commit.
Generated by check_versions.sh on $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
    
    # Commit
    git commit -m "$commit_msg"
    
    # Push to origin
    git push origin master
}

# Main execution
echo "=== PHP-Zstd Version Check Script ==="
echo "Mode: $MODE"
echo "Checking versions at $(get_timestamp)"
echo

# Get current versions from file
read_current_versions

# Get latest commit
echo "Checking latest php-ext-zstd commit..."
NEW_COMMIT=$(get_latest_commit)

if [ "$NEW_COMMIT" = "unknown" ]; then
    echo "ERROR: Failed to get latest commit from GitHub"
    exit 1
fi

echo "Getting version information..."
NEW_VERSION=$(get_version)

echo "Latest commit: ${NEW_COMMIT:0:7}"
echo "Version: $NEW_VERSION"
echo "Commit date: $COMMIT_DATE"
echo

# Compare versions
VERSIONS_CHANGED=0
if [ "$CURRENT_COMMIT" != "$NEW_COMMIT" ]; then
    VERSIONS_CHANGED=1
fi

if [ $FORCE -eq 1 ]; then
    echo "Force mode enabled - will update regardless of changes"
    VERSIONS_CHANGED=1
fi

# Report status
if [ $VERSIONS_CHANGED -eq 1 ]; then
    echo "=== Changes detected ==="
    if [ "$CURRENT_COMMIT" != "$NEW_COMMIT" ]; then
        echo "  Commit: ${CURRENT_COMMIT:0:7} -> ${NEW_COMMIT:0:7}"
    fi
    echo
    
    if [ "$MODE" = "update" ]; then
        if [ $DRY_RUN -eq 1 ]; then
            echo "DRY RUN: Would update versions.json"
            echo "DRY RUN: Would commit with message about new commit"
            echo "DRY RUN: Would push to origin/master"
        else
            echo "Updating versions.json..."
            write_versions "$NEW_COMMIT" "$NEW_VERSION" "$COMMIT_DATE" "$COMMIT_MESSAGE"
            echo "versions.json updated"
            
            echo "Committing and pushing changes..."
            commit_and_push "$CURRENT_COMMIT" "$NEW_COMMIT" "$NEW_VERSION"
            echo "Changes committed and pushed successfully"
        fi
    else
        echo "Running in check-only mode - no changes made"
        echo "Run with --update to apply changes"
    fi
    
    exit 1  # Exit with error code to indicate changes available
else
    echo "=== No changes detected ==="
    echo "  Current commit: ${CURRENT_COMMIT:0:7}"
    echo "  Current version: $CURRENT_VERSION"
    exit 0
fi